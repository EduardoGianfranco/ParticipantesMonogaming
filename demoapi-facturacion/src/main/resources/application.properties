server.port=${PORT:8080}
management.endpoints.web.exposure.include=*

##configuración de conexión a Base de Datos
spring.datasource.url =jdbc:postgresql://ec2-174-129-225-160.compute-1.amazonaws.com:5432/d9f4scbl80tie2
spring.datasource.username=cbwxjtncvchbxk
spring.datasource.password=${HEROKU_PSS_BD:f3188cd7cc1999937fe268a3307c6102d2e3c49df138895767d7dd11ee692392}
spring.datasource.driver-class-name = org.postgresql.Driver

spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.maximum-pool-size=5

spring.jpa.database-platform = org.hibernate.dialect.PostgreSQL94Dialect
spring.jpa.hibernate.ddl-auto = update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.use_sql_comments = true
spring.jpa.properties.hibernate.format_sql = true
logging.level.org.hibernate.type = trace

spring.jpa.hibernate.naming.implicit-strategy= org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl

##conexión a Rabbitmq para integracion por cola (Broker-Asíncrona)

spring.rabbitmq.host = hornet.rmq.cloudamqp.com
spring.rabbitmq.username = 	dfftkavi
spring.rabbitmq.password = LNDeVE69hfZzHKLWG8TRTe24Gs48cadS
spring.rabbitmq.virtual-host = 	dfftkavi

##Creación de cola (queue) con Rabbitmq
sunat.rabbitmq.exchange = sunat-exchange
sunat.rabbitmq.queue = request-factura-queue